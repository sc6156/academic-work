This text file describes how the required features have been implemented in the 
source code for the fictional online booking system created by Scott Cumming for 
the PE7045 final assignment. 

- It is important to note that all pages are saved in php file format due to the 
extensive use of this language throughout the system. 

- Navigation across the site is achieved through the following:
  
  * A header on every page which contains the company logo and a menu with links to 
  the following pages: 'home', 'about', 'sign in' and 'register'. When a user is signed in, 
  'sign in' and 'register' disappear and are replaced by 'account' and 'logout'.

  * A sticky bar on most pages which allows users to navigate to the accommodation search page 
  or the page detailing the activities on offer. Both are key features of the website so 
  they were given prominence in this bar. 

  * A footer on the vast majority of pages which links to thew following pages: credits, 
  contact us, ux design and security report. Apart from contact us, users have to 
  be signed in to access these pages. 

- The header, sticky bar and footer are created by user-defined functions stored in the 
'functions.php' script. This file also contains various other functions used across the 
website.

- The homepage is called 'home.php', rather than 'index.php'. It doesn't contain the sticky bar 
mentioned above but does contain buttons in a prominent location linking the accommodation 
search and activities pages. This is because the homepage has been designed to be enticing and 
unique. 

- The wireframe, notes and personas created during the design process can be downloaded from the 
'ux_design.php' page, which is linked in the footer. You have to be signed in to access this page.
The documents are saved in the folder '../PE7045/assets/downloadable_files'. 

- Users register on the 'register.php' page, which is linked in the header. When the html form 
on this page is submitted, it is processed by the 'registerProcess.php' page. This page validates 
the form and displays any errors present to the user. During this stage, the database is queried to 
check whether the user's email address is already registered, as this is used as the username and 
needs to be unique. When errors are displayed, the user is also presented with a button which links 
to a function in the 'js_functions.js' file in the scripts folder. When called, this function hides 
the errors and redisplays the html form with the data initially entered by the user (excluding the 
password). If there are no errors, the form data is inserted into the database and a confirmation 
message is displayed. The user is then redirected to the 'sign_in.php' page to login with their new 
details. 

- The 'accommodation_search.php' page displays all the accommodation in the database and allows 
the user to enter optional search terms (number of guests, bedrooms, min cost and max cost) to 
narrow down the list. The main functionality for the page is provided by the 'search_engine.php' 
file, which is saved in the scripts folder. This script displays all of the accomodation in the 
database by default by calling another script named 'accom_list.php'. If the html form on the 
'accommodation_search.php' page is submitted, the search engine queries the database then displays 
the results that are returned using another script called 'display_results.php'.

- The 'sign_in.php' page contains an html form which enables a user to login. When submitted, the 
form is processed by the page 'authenticate.php'. Similar to the registration process, this page 
validates the input then displays any errors to the user, before redirecting them back to the 
'sign_in.php' page. During the validation stage, the database is queried to check whether the hash 
generated by the password entered by the user matches the stored hash. If it matches, session 
variables are set to record the user's name, ID and the fact they are logged in as this is the last 
check. A confirmation message is then displayed telling the user they are now signed in. They are then 
redirected back to the page they were on before they visited the 'sign_in.php' page using a previously 
set session variable called 'link'. 

- Users can navigate to the details page for individual accommodation through the 'accommodation_search.php' 
page or the 'recently added accommodation' section of the homepage. Each individual accommodation page is 
saved in a file formatted as follows, '../IDnumber_accommodationName.php'. For example, the first accommodation 
is 0001_loch_hosta_cottage.php. The number corresponds to the accommodation ID number in the database. 

- Each accommodation page contains an html form which allows the user to book the accommodation, if they are 
signed in. If they are not, a link to the 'sign_in.php' page is displayed. When a booking is submitted through 
the html form, the data is processed by the 'booking.php' page. The input is validated first, which includes
submitting a query to the database to check whether the accommodation is already booked. If there are errors, 
these are displayed on the page with a button that will take the user back to the form on the accommodation page, 
if clicked. If there are no errors, the user is taken to the 'bookingConfirmation.php' page and a summary of the
proposed booking is displayed. The user is then asked to click a button to confirm the booking, which inserts the 
details into the database once clicked. At this stage, a confirmation message is displayed and the user is 
redirected to the homepage. Session variables are also stored and used in the 'account.php' page, which lists the 
user's details and any bookings they have made. 

- A link to download the academic security report is contained within the 'security_report.php' page. Users 
must be signed in to access this page. The report is saved in the folder '../PE7045/assets/downloadable_files'.

- All sources used to created the website are detailed in the 'credits.php' page. As above, users must be 
signed in to access this page. 





















